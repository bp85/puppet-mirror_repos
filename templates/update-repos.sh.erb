#!/bin/bash
# Author: Bhanu Prasad G (gangurubhanu@gmail.com)

# This file is managed by puppet

exec 3>&1
exec 4>&2

#default variables
: ${UPDATE:=True}
: ${VERBOSE:=False}

#define variables
REPOS_DIR=<%= scope.lookupvar('mirror_repos::repos_dir') %>
CONFIG_DIR=<%= scope.lookupvar('mirror_repos::config_dir') %>
CREATEREPO_CMD=`which createrepo`
REPOSYNC_CMD="$(which reposync) -q"

show_help(){

cat << EOF 1>&2

USAGE: $0 [-huv] [-o OS] [-r REPO1,REPO2] -- Script to mirror repositories to local repos

where:
      -h | --help             show help on how to run this script
      -o | --os               update this OS repos only (default all)
      -r | --repo             repo name to update (all by default)
      -v | --verbose          show output/error to stdout/stderr (redirect to /dev/null by default)
      -u | --update           repos update only (enabled by default)

By default, running this script sync all available repositories for all OS.
For syncing only a single/few repos give reponames with -r option seperated by commas.

EOF

}

#make options based on help
OPTIONS=$(getopt -o "vuho:r:" -l "verbose,update,help,os:,repo:" -n 'update-repos' -- "$@")
[ $? -eq 0 ] && eval set -- "$OPTIONS"


main(){
    if [ ${UPDATE} == 'True' ]; then
        [ ! -f $CONFIG_DIR/$OS.conf ] && echo "$OS configuration not available at $CONFIG_DIR" && exit 1
        for REPO in ${REPOS_OS[@]}; do
            if ! egrep -s "\[$REPO\]" $CONFIG_DIR/$OS.conf >& /dev/null ; then
                echo "$REPO configuration not available" && exit 1
            fi
            echo "updating $REPO for $OS now"
            yum clean all >& /dev/null

            #sync remote repos to local directories
	    <% if @operatingsystemmajrelease == '6' -%>
            	$REPOSYNC_CMD -q -l -c $CONFIG_DIR/$OS.conf --repoid=$REPO --download_path=$REPOS_DIR/$OS/
	    <% end -%>
	    <% if @operatingsystemmajrelease == '7' -%>
            	$REPOSYNC_CMD -q -l -c $CONFIG_DIR/$OS.conf --repoid=$REPO --download_path=$REPOS_DIR/$OS/
	    <% end -%>
	    <% if @operatingsystemmajrelease == '8' -%>
                $REPOSYNC_CMD -q -c $CONFIG_DIR/$OS.conf --repoid=$REPO --download-path=$REPOS_DIR/$OS/
	    <% end -%>

            #create yum repository from local synced directories
            $CREATEREPO_CMD --workers=8 --update $REPOS_DIR/$OS/$REPO
        done
        #reset REPOS for next OS
        REPOS_OS=''
    fi
}

while true; do
    case "$1" in
          -h | --help)
                  show_help
                  exit 1
                  ;;
          -o | --os)
                  OSES=$2
                  shift 2
                  ;;
          -r | --repo)
                  REPOS=$2
                  shift 2
                  ;;
          -v | --verbose)
                  CREATEREPO_CMD+=' -v'
                  VERBOSE='True'
                  REPOSYNC_CMD=`which reposync`
                  shift
                  ;;
          -u | --update)
                  shift
                  ;;
          --)
                  shift
                  break
                  ;;
          *)
                  echo "Option not found"
                  show_help
                  exit 1
                  ;;
    esac
done

#if no os, is given get all OS defined in puppet hiera
[ $OSES ] || OSES=( <%= @oses.join(" ") %> )

for OS in ${OSES[@]}; do
    #if repos are specified, make them an array
    ##if repos are not specified, get from configs
    <% @oses.each do | os | -%>
    [ $REPOS ] && REPOS_<%= os.split('-').join('_') %>=( $(echo "$REPOS" |sed 's/,/ /g') )
    [ ${REPOS_<%= os.split('-').join('_') %>} ] || REPOS_<%= os.split('-').join('_') %>=( <%= scope.lookupvar('mirror_repos::repos')[os].keys.join(" ") %> )
    <% end -%>
    OS=$(echo $OS | sed 's/-/_/g')
    #now define a new array, because substrings won't perform well in for loop
    REPOS_OS=$(eval echo \${REPOS_${OS}[*]})
    if [ ${VERBOSE} == 'False' ]; then
        exec 2>/dev/null 1>/dev/null
    fi
    #call main function always
    main
done
